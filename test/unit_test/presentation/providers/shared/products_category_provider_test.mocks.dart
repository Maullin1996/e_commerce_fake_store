// Mocks generated by Mockito 5.4.5 from annotations
// in fake_store/test/unit_test/presentation/providers/shared/products_category_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fake_store/infraestructure/services/key_value_storage.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSharedPreferences_0 extends _i1.SmartFake
    implements _i2.SharedPreferences {
  _FakeSharedPreferences_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [KeyValueStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyValueStorage extends _i1.Mock implements _i3.KeyValueStorage {
  MockKeyValueStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SharedPreferences> getSharedPrefs() => (super.noSuchMethod(
        Invocation.method(
          #getSharedPrefs,
          [],
        ),
        returnValue:
            _i4.Future<_i2.SharedPreferences>.value(_FakeSharedPreferences_0(
          this,
          Invocation.method(
            #getSharedPrefs,
            [],
          ),
        )),
      ) as _i4.Future<_i2.SharedPreferences>);

  @override
  _i4.Future<T?> getValue<T>(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getValue,
          [key],
        ),
        returnValue: _i4.Future<T?>.value(),
      ) as _i4.Future<T?>);

  @override
  _i4.Future<bool> removeKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #removeKey,
          [key],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setKeyValue<T>(
    String? key,
    T? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setKeyValue,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
